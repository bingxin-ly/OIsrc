// 计算从起点 start 到终点 target 的最近距离
int BFS(Node start, Node target) {
    queue<Node> q; // 核心数据结构
    bool visited[N]; // 避免走回头路
    
    q.push(start); // 将起点加入队列
    visited[start] = true;
    int step = 0; // 记录扩散的步数

    while (!q.empty()) {
        int sz = q.size();
        /* 将当前队列中的所有节点向四周扩散 */
        for (int i = 0; i < sz; i++) {
            Node cur = q.front();
            q.pop();
            /* 划重点：这里判断是否到达终点 */
            if (cur == target)
                return step;
            /* 将 cur 的相邻节点加入队列 */
            for (Node x : cur.adj()) {
                if (!visited[x]) {
                    q.push(x);
                    visited[x] = false;
                }
            }
        }
        /* 划重点：更新步数在这里 */
        step++;
    }
}
